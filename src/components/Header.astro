---
import ThemeToggle from "./ThemeToggle.astro";
import { getTranslations, type Translations } from "../i18n";
import LanguageSelector from "./LanguageSelector.astro";

const { currentLocale = "es" } = Astro;
const translations: Translations = getTranslations({ currentLocale });

const navItems = [
  {
    title:
      "EXPERIENCIA" in translations.NAV_ITEMS
        ? translations.NAV_ITEMS.EXPERIENCIA
        : translations.NAV_ITEMS.EXPERIENCE,
    label: "experiencia",
    url: "/#experiencia",
  },
  {
    title:
      "PROYECTOS" in translations.NAV_ITEMS
        ? translations.NAV_ITEMS.PROYECTOS
        : translations.NAV_ITEMS.PROJECTS,
    label: "proyectos",
    url: "/#proyectos",
  },
  {
    title:
      "SOBRE_MI" in translations.NAV_ITEMS
        ? translations.NAV_ITEMS.SOBRE_MI
        : translations.NAV_ITEMS.ABOUT_ME,
    label: "sobre-mi",
    url: "/#sobre-mi",
  },
  {
    title: translations.NAV_ITEMS.BLOG,
    label: "Blog",
    url: currentLocale === "es" ? "/blog/" : `/${currentLocale}/blog/`,
  },
];
---

<header
  class="fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2"
>
  <nav
    class="flex px-3 text-sm font-medium rounded-full text-gray-600 dark:text-gray-200 justify-center items-center"
  >
    {
      navItems.map((link) => (
        <a
          class="relative block px-2 py-2 transition hover:text-green-500 dark:hover:text-green-400"
          aria-label={link.label}
          href={link.url}
        >
          {link.title}
        </a>
      ))
    }
    <ThemeToggle />
    <LanguageSelector currentLanguage={currentLocale} />
  </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll("header nav a");

    const callback = (entries: any[]) => {
      entries.forEach(
        (entry: { isIntersecting: any; target: { id: string | null } }) => {
          if (entry.isIntersecting) {
            navItems.forEach((item) => {
              if (item.getAttribute("aria-label") == entry.target.id) {
                item.classList.add("text-green-500");
              } else {
                item.classList.remove("text-green-500");
              }
            });
          }
        }
      );
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });
</script>

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  @keyframes nav-shadown {
    to {
      @apply shadow-lg ring-1 backdrop-blur dark:bg-gray-800/90 bg-white/50 ring-white/10;
    }
  }
</style>
